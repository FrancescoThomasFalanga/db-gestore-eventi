Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)
SELECT * FROM events WHERE price IS NULL;


Selezionare tutte le location in ordine alfabetico (82)
SELECT * FROM locations ORDER BY name ASC;


Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)
SELECT * FROM events WHERE price < 20 AND duration < '03:00:00';


Selezionare tutti gli eventi di dicembre 2023 (25)
SELECT * FROM events WHERE start >= '2023-12-01 00:00:00' AND start < '2024-01-01 00:00:00';


Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)
SELECT * FROM events WHERE duration > '02:00:00';


Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e durata totale (1040)
SELECT name, start, TIME(start) AS ora_inizio, TIME(DATE_ADD(start, INTERVAL duration HOUR_SECOND)) AS ora_fine, duration FROM events;


Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)
SELECT * FROM events WHERE user_id = 1202;


Selezionare il numero totale di eventi per ogni fascia di prezzo (81)
SELECT price, COUNT(*) AS numero_eventi FROM events GROUP BY price;


Selezionare tutti gli utenti admin ed editor (9)
SELECT * FROM users WHERE role_id IN (1, 2);


Selezionare tutti i concerti (eventi con il tag “concerti”) (72)
SELECT e.* FROM events e INNER JOIN event_tag et ON e.id = et.event_id INNER JOIN tags t ON et.tag_id = t.id WHERE t.slug = 'concerti';


Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)
SELECT t.name, AVG(e.price) AS prezzo_medio
FROM events e
INNER JOIN event_tag et ON e.id = et.event_id
INNER JOIN tags t ON et.tag_id = t.id
GROUP BY t.name;


Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di esse (82)
SELECT l.*, COUNT(e.id) AS num_eventi
FROM locations l
LEFT JOIN events e ON l.id = e.location_id
GROUP BY l.id;


Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug: concerto-classico-serale, id: 34) (30)
SELECT u.*
FROM users u
INNER JOIN bookings b ON u.id = b.user_id
INNER JOIN events e ON b.event_id = e.id
WHERE e.slug = 'concerto-classico-serale' AND e.id = 34;


Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug: festival-jazz-estivo, id: 2) specificando nome e cognome (13)
SELECT u.first_name, u.last_name
FROM users u
INNER JOIN bookings b ON u.id = b.user_id
INNER JOIN events e ON b.event_id = e.id
WHERE e.slug = 'festival-jazz-estivo' AND e.id = 2;


Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai biglietti totali per l’evento) (18)
SELECT e.*
FROM events e
INNER JOIN (
    SELECT event_id, COUNT(*) AS num_prenotazioni
    FROM bookings
    GROUP BY event_id
) b ON e.id = b.event_id
WHERE b.num_prenotazioni = e.total_tickets;


Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)
SELECT l.*, COUNT(e.id) AS num_eventi
FROM locations l
LEFT JOIN events e ON l.id = e.location_id
GROUP BY l.id
ORDER BY num_eventi DESC;


Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)
SELECT u.*, COUNT(b.id) AS num_prenotazioni
FROM users u
INNER JOIN bookings b ON u.id = b.user_id
GROUP BY u.id
HAVING num_prenotazioni > 70;


Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)
SELECT e.name AS nome_evento, l.name AS nome_location, COUNT(b.id) AS prenotazioni, (e.total_tickets - COUNT(b.id)) AS biglietti_disponibili
FROM events e
INNER JOIN bookings b ON e.id = b.event_id
INNER JOIN locations l ON e.location_id = l.id
GROUP BY e.id;